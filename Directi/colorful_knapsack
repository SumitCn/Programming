#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
vector<int> v[10001];
int dp[100][100]={0};
int knapsack(int color ,int b , int m)
 {
    if(b<0)
      return INT_MIN;
    if(color == m+1 )
       return 0;
    
    if(dp[color][b]!=-1)
       return dp[color][b];
    int p=INT_MIN;
   for(int i=0;i<v[color].size();i++)
     { int ans=v[color][i]+knapsack(color+1,b-v[color][i],m);
      
     dp[color][b]=max(ans,dp[color][b]);
      }
     return dp[color][b];

  }
int main()
{

  int t;
  cin>>t;
  while(t--)
   {
    int a,b,c;
    cin>>a>>b>>c;
   for(int i=0;i<100;i++)
     for(int j=0;j<100;j++)
          dp[i][j]=-1;
   int ar[100001]={0};
   int br[100001]={0};
    for(int i=0;i<a;i++)
     cin>>ar[i];
    for(int i=0;i<a;i++)
     { cin>>br[i];
       v[br[i]].push_back(ar[i]);
      }
int id=0;
int ans=knapsack(1,c,b);
for(int i=1;i<=b;i++)
 { id=0; 
   for(int j=0;j<=c;j++)
  {   if(dp[i][j]!=-1)
       id=1;
  }
   if(id==0)
    break;
 }
for(int i=0;i<=b;i++)
  v[i].clear();
if(id==1)
cout<<c-ans;
else
  cout<<"-1";


   cout<<endl;
   }
return 0;
}
