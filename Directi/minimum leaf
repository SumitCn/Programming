vector<int> findMinHeightTrees(int n, vector<pair<int, int>>& edges) {
        std::vector<std::vector<int>> adjacency_list(n);
        std::vector<int> degrees(n);
        for (const auto& p: edges)
        {
            adjacency_list[p.first].emplace_back(p.second);
            adjacency_list[p.second].emplace_back(p.first);
            ++degrees[p.first];
            ++degrees[p.second];
        }
        std::unordered_set<int> visited;
        std::queue<int> queue;
        for (int i = 0; i < n; ++i)
        {
            if (degrees[i] <= 1)
            {
                queue.push(i);
                visited.insert(i);
            }
        }
        while (!queue.empty() && n > 2)
        {
            int len = queue.size();
            for (int i = 0; i < len; ++i)
            {
                int node = queue.front();
                queue.pop();
                for (const auto& neigh : adjacency_list[node])
                {
                    --degrees[neigh];
                    if (degrees[neigh] == 1 && visited.find(neigh) == visited.end())
                    {
                        visited.insert(neigh);
                        queue.push(neigh);
                    }
                }  
            }
            n -= len;
        }
        std::vector<int> ret;
        while (!queue.empty())
        {
            ret.push_back(queue.front());
            queue.pop();
        }
        return ret;
    }
